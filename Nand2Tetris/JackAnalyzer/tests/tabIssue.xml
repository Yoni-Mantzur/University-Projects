<class>
<keyword>class</keyword>
<identifier>TabIssue</identifier>
<symbol>{</symbol>
<classVarDec>
<keyword>field</keyword>
<identifier>String</identifier>
<identifier>a</identifier>
<symbol>,</symbol>
<identifier>x</identifier>
<symbol>,</symbol>
<identifier>y</identifier>
<symbol>,</symbol>
<identifier>z</identifier>
<symbol>,</symbol>
<identifier>w</identifier>
<symbol>,</symbol>
<identifier>u</identifier>
<symbol>,</symbol>
<identifier>catchy</identifier>
<symbol>;</symbol>
</classVarDec>
<classVarDec>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>catchy2</identifier>
<symbol>;</symbol>
</classVarDec>
<subroutineDec>
<keyword>constructor</keyword>
<identifier>SquareGame</identifier>
<identifier>new</identifier>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>yo man</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant></stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>z</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>\t</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>u</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>\n</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>w</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>\tyoman\n</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>a</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>text //</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>catchy</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>/*bla//a*/qqq</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>catchy2</identifier>
<symbol>=</symbol>
<expression>
<term>
<integerConstant>9765</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>z</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>seeyounow</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>a</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>another one</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<identifier>a</identifier>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>anotheranother</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose</identifier>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>try</identifier>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<whileStatement>
<keyword>while</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifier>i</identifier>
</term>
<symbol>&lt;</symbol>
<term>
<integerConstant>10</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
</statements>
<symbol>}</symbol>
</whileStatement>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<identifier>catchy</identifier>
</term>
<symbol>&gt;</symbol>
<term>
<integerConstant>100</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
</statements>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<statements>
</statements>
<symbol>}</symbol>
</ifStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<symbol>}</symbol>
</class>